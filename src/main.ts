/**
 * @fileoverview Main orchestration module for Hacker News Summarizer
 * @description Coordinates the entire workflow of fetching Hacker News articles,
 * generating AI summaries, and posting them to Slack with proper error handling.
 */

import { fetchHackerNews, getHackerNewsLink } from "./news"
import { generateSingleArticleSummary, isValidSummary, ProcessResult } from "./gemini"
import { postToSlack } from "./slack"
import { SLACK_BOT_TOKEN, SLACK_CHANNEL_ID, GEMINI_MODEL_NAME, SLACK_USERNAME, GEMINI_API_KEY, ARTICLE_COUNT } from "./config"
import { NewsArticle } from "./types"

/**
 * Posts a no-news message to Slack
 * @returns The no-news message that was posted
 */
const handleNoNewsFound = (): string => {
    const noNewsMessage = `Hacker Newsから最近のニュースは見つかりませんでした。`
    try {
        postToSlack(undefined, undefined, noNewsMessage, SLACK_CHANNEL_ID, SLACK_BOT_TOKEN, GEMINI_MODEL_NAME, { username: SLACK_USERNAME })
    } catch (slackError) {
        console.error("Failed to post 'no news' message to Slack:", slackError)
    }
    return noNewsMessage
}

/**
 * Posts an error message for a specific article
 * @param article - Article that failed processing
 * @param reason - Reason for failure
 */
const postArticleError = (article: NewsArticle, reason: string): void => {
    const errorMessage = `この記事（${article.title} - ${article.link}）の要約取得に失敗しました (理由: ${reason})。`
    try {
        postToSlack(undefined, undefined, errorMessage, SLACK_CHANNEL_ID, SLACK_BOT_TOKEN, GEMINI_MODEL_NAME, { username: SLACK_USERNAME })
    } catch (slackError) {
        console.error(`Failed to post error message for article "${article.title}" to Slack:`, slackError)
    }
}

/**
 * Posts a processing error message for a specific article
 * @param article - Article that failed processing
 * @param error - Error that occurred
 */
const postProcessingError = (article: NewsArticle, error: any): void => {
    const errorMessage = `この記事（${article.title} - ${article.link}）の処理中または投稿中にエラーが発生しました: ${error.message}`
    try {
        postToSlack(undefined, undefined, errorMessage, SLACK_CHANNEL_ID, SLACK_BOT_TOKEN, GEMINI_MODEL_NAME, { username: SLACK_USERNAME })
    } catch (slackError) {
        console.error(`Failed to post error message for article "${article.title}" to Slack:`, slackError)
    }
}

/**
 * Posts a general error message to Slack
 * @param error - Error that occurred
 */
const postGeneralError = (error: any): void => {
    try {
        const errorMessage = `処理全体で予期せぬエラーが発生しました: ${error.message}`
        postToSlack(undefined, undefined, errorMessage, SLACK_CHANNEL_ID, SLACK_BOT_TOKEN, GEMINI_MODEL_NAME, { username: SLACK_USERNAME })
    } catch (slackError) {
        console.error("Failed to post overall error message to Slack:", slackError)
    }
}

/**
 * Generates summary for a single article using Gemini API
 * @param article - Article to process
 * @returns Summary text generated by Gemini API
 * @throws {Error} When Gemini API call fails or returns error response
 */
const generateArticleSummary = (article: NewsArticle): string => {
    console.log(`Generating summary body for: ${article.title}`)
    return generateSingleArticleSummary(GEMINI_API_KEY, GEMINI_MODEL_NAME, article)
}

/**
 * Posts an article summary to Slack
 * @param article - Article to post
 * @param summaryBody - Generated summary text
 * @returns True if posting was successful, false otherwise
 */
const postArticleSummary = (article: NewsArticle, summaryBody: string): boolean => {
    try {
        console.log(`Attempting to post summary for "${article.title}"`)
        const hackerNewsLink = getHackerNewsLink(article)
        postToSlack(article.title, hackerNewsLink, summaryBody, SLACK_CHANNEL_ID, SLACK_BOT_TOKEN, GEMINI_MODEL_NAME, { username: SLACK_USERNAME })
        console.log(`Successfully posted summary for "${article.title}"`)
        return true
    } catch (error) {
        console.error(`Error posting article "${article.title}" to Slack:`, error)
        return false
    }
}

/**
 * Processes a single article to generate summary
 * @param article - Article to process
 * @returns Object with article, summary text, success status, and optional error reason
 */
const processArticleForSummary = (article: NewsArticle): { article: NewsArticle; summaryBody: string; success: boolean; reason?: string } => {
    try {
        const summaryBody = generateArticleSummary(article)
        if (!isValidSummary(summaryBody)) {
            const reason = summaryBody || '不明な理由'
            console.warn(`Summary generation issue or block for "${article.title}": ${reason}`)
            return { article, summaryBody, success: false, reason }
        }

        return { article, summaryBody, success: true }
    } catch (error) {
        console.error(`Error generating summary for "${article.title}":`, error)
        const errorMessage = error instanceof Error ? error.message : String(error)
        return { article, summaryBody: '', success: false, reason: errorMessage }
    }
}

/**
 * Processes a single summary for Slack posting
 * @param summary - Summary object with article and generated text
 * @returns ProcessResult indicating success or failure
 */
const processSummaryForSlack = ({ article, summaryBody, success, reason }: { article: NewsArticle; summaryBody: string; success: boolean; reason?: string }): ProcessResult => {
    if (!success) {
        postArticleError(article, reason || '不明な理由')
        return { success: false, articleTitle: article.title, reason: reason || '不明な理由' }
    }

    const posted = postArticleSummary(article, summaryBody)
    if (!posted) {
        postProcessingError(article, new Error('Slack投稿に失敗しました'))
        return { success: false, articleTitle: article.title, reason: 'Slack投稿失敗' }
    }

    return { success: true, articleTitle: article.title }
}

/**
 * Wrapper function that adds rate limiting to a map function
 * @param fn - Function to apply to each element
 * @param delayMs - Delay in milliseconds between calls (default: 2000)
 * @returns Wrapped function with rate limiting applied
 */
const withRateLimit = <T, R>(fn: (item: T) => R, delayMs: number = 2000) => {
    return (item: T, index: number, array: T[]): R => {
        const result = fn(item)
        if (index < array.length - 1) {
            console.log(`Waiting ${delayMs}ms before next operation...`)
            Utilities.sleep(delayMs)
        }
        return result
    }
}

/**
 * Main function that executes news fetching and summarization
 * @returns Success message with the number of posted summaries
 * @throws {Error} When critical errors occur during processing
 */
export const main = (): string => {
    try {
        console.log(`Fetching recent news for Hacker News...`)
        const articles: NewsArticle[] = fetchHackerNews(ARTICLE_COUNT)
        if (articles.length === 0) {
            console.log("No news articles found.")
            return handleNoNewsFound()
        }

        console.log(`Found ${articles.length} articles. Generating summaries...`)
        const summaries = articles.map(withRateLimit(processArticleForSummary, 1000))

        console.log(`Posting summaries to Slack...`)
        const results = summaries.map(withRateLimit(processSummaryForSlack))

        const successfulPosts = results.filter(result => result.success).length
        console.log(`Processing complete. ${successfulPosts} of ${articles.length} articles successfully summarized and posted.`)

        return `${successfulPosts} summaries posted.`
    } catch (error) {
        console.error("Error in main function:", error)
        postGeneralError(error)
        throw error
    }
}
